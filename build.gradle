import com.github.spotbugs.snom.SpotBugsTask

plugins {
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id 'com.github.spotbugs' version '5.0.14'
    id 'checkstyle'
    id 'org.sonarqube' version '4.0.0.2929'
    id 'pmd'
    id 'java-test-fixtures'
    id 'info.solidsoft.pitest' version '1.9.11'
    id 'net.ltgt.errorprone' version '3.1.0'
    id 'jacoco-report-aggregation'
}

description = 'pg-index-health build'

allprojects {
    group 'io.github.mfvanek'
    version '0.9.1-SNAPSHOT'

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.sonarqube'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'java-test-fixtures'
    apply plugin: 'net.ltgt.errorprone'

    ext {
        slf4jVersion = '2.0.7'
        logbackVersion = '1.4.7'
        dbcp2Version = '2.9.0'
        testcontainersVersion = '1.18.0'
        postgresqlVersion = '42.6.0'
        mockitoVersion = '5.3.1'
        awaitilityVersion = '4.2.0'
        equalsverifierVersion = '3.14.1'
        commonsLang3Version = '3.12.0'
        jsr305Version = '3.0.2'
        pitDashboardReporterVersion = '0.1.5'
        customMaxParallelForks = 1 // try to set a higher value to speed up the local build
    }

    dependencies {
        implementation "com.google.code.findbugs:jsr305:${jsr305Version}"

        testImplementation 'org.assertj:assertj-core:3.24.2'
        testImplementation enforcedPlatform('org.junit:junit-bom:5.9.3')
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        testImplementation 'org.junit.jupiter:junit-jupiter-api'

        checkstyle 'com.thomasjensen.checkstyle.addons:checkstyle-addons:7.0.1'
        errorprone 'com.google.errorprone:error_prone_core:2.18.0'
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        withJavadocJar()
        withSourcesJar()
    }
    tasks.withType(JavaCompile).configureEach {
        options.errorprone {
            disableWarningsInGeneratedCode = true
            disable('StringSplitter', 'ImmutableEnumChecker', 'FutureReturnValueIgnored', 'EqualsIncompatibleType')
        }
    }

    jar {
        manifest {
            attributes("Implementation-Title": project.name,
                    "Implementation-Version": project.version)
        }
    }

    javadoc {
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    checkstyle {
        toolVersion '10.5.0'
        configFile file("../config/checkstyle/checkstyle.xml")
        ignoreFailures = false
        maxWarnings = 0
        maxErrors = 0
    }

    pmd {
        consoleOutput = true
        toolVersion = '6.52.0'
        ruleSetFiles = files("../config/pmd/pmd.xml")
        ruleSets = []
    }

    spotbugs {
        showProgress = true
        effort = 'max'
        reportLevel = 'low'
        excludeFilter = file("../config/spotbugs/exclude.xml")
    }
    tasks.withType(SpotBugsTask).configureEach {
        reports {
            xml.required = true
            html.required = true
        }
    }

    jacocoTestReport {
        reports {
            xml.required = true
            html.required = true
        }
    }
    jacocoTestCoverageVerification {
        dependsOn test
        violationRules {
            rule {
                limit {
                    counter = 'CLASS'
                    value = 'MISSEDCOUNT'
                    maximum = 0
                }
            }
            rule {
                limit {
                    counter = 'METHOD'
                    value = 'MISSEDCOUNT'
                    maximum = 0
                }
            }
            rule {
                limit {
                    counter = 'LINE'
                    value = 'MISSEDCOUNT'
                    maximum = 0
                }
            }
            rule {
                limit {
                    counter = 'INSTRUCTION'
                    value = 'COVEREDRATIO'
                    minimum = 1.0
                }
            }
            rule {
                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 1.0
                }
            }
        }
    }
    check.dependsOn jacocoTestReport, jacocoTestCoverageVerification

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                jar.preserveFileTimestamps = false
                jar.reproducibleFileOrder = true
                suppressPomMetadataWarningsFor('testFixturesApiElements')
                suppressPomMetadataWarningsFor('testFixturesRuntimeElements')

                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }

                pom {
                    name = project.name
                    description = project.provider(project::getDescription)
                    url = 'https://github.com/mfvanek/pg-index-health'
                    licenses {
                        license {
                            name = 'Apache License Version 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0'
                        }
                    }

                    developers {
                        developer {
                            id = 'mfvanek'
                            name = 'Ivan Vakhrushev'
                            email = 'mfvanek@gmail.com'
                        }
                        developer {
                            id = 'Evreke'
                            name = 'Alex Antipin'
                            email = 'evreke@gmail.com'
                        }
                    }

                    scm {
                        connection = 'scm:git:https://github.com/mfvanek/pg-index-health.git'
                        developerConnection = 'scm:git@github.com:mfvanek/pg-index-health.git'
                        url = 'https://github.com/mfvanek/pg-index-health'
                    }
                }
            }
        }

        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }

    signing {
        if (!version.endsWith('SNAPSHOT')) {
            useGpgCmd()
            sign publishing.publications.mavenJava
        }
    }
}

dependencies {
    subprojects.forEach {
        jacocoAggregation it
    }
}

reporting {
    reports {
        testCodeCoverageReport(JacocoCoverageReport) {
            testType = TestSuiteType.UNIT_TEST
        }
    }
}

tasks.named('check') {
    dependsOn tasks.named('testCodeCoverageReport', JacocoReport)
}

sonarqube {
    properties {
        property "sonar.projectKey", "mfvanek_pg-index-health"
        property "sonar.organization", "mfvanek"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}
