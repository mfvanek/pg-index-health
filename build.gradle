plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id 'com.github.spotbugs' version '5.0.12'
    id 'checkstyle'
    id 'org.sonarqube' version '3.4.0.2513'
    id 'pmd'
}

group 'io.github.mfvanek'
version '0.7.0'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.apache.commons:commons-dbcp2:2.9.0'
    implementation 'org.slf4j:slf4j-api:2.0.1'

    testImplementation enforcedPlatform('org.junit:junit-bom:5.9.1')
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testImplementation 'ch.qos.logback:logback-classic:1.3.1'
    testImplementation 'org.mockito:mockito-core:4.8.0'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.10.1'
    testImplementation 'org.assertj:assertj-core:3.23.1'
    testImplementation 'org.awaitility:awaitility:4.2.0'

    testImplementation 'org.postgresql:postgresql:42.5.0'
    testImplementation enforcedPlatform('org.testcontainers:testcontainers-bom:1.17.3')
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
}

test {
    testLogging.showStandardStreams = false // set to true for debug purposes
    useJUnitPlatform() {
        excludeTags 'cluster'
    }
    dependsOn checkstyleMain, checkstyleTest, pmdMain, pmdTest, spotbugsMain, spotbugsTest
    maxParallelForks = 2 // try to set a higher value to speed up the local build
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}

tasks.register('clusterTest', Test) {
    description = 'Runs tests on PostgreSQL cluster.'
    group = 'verification'
    useJUnitPlatform() {
        includeTags 'cluster'
    }
    maxParallelForks = 1 // important!
    mustRunAfter test
}

build.dependsOn clusterTest

jar {
    manifest {
        attributes("Implementation-Title": project.name,
                "Implementation-Version": project.version)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name = project.name
                description = 'pg-index-health is a Java library for analyzing and maintaining indexes health in PostgreSQL databases.'
                url = 'https://github.com/mfvanek/pg-index-health'
                licenses {
                    license {
                        name = 'Apache License Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0'
                    }
                }

                developers {
                    developer {
                        id = 'mfvanek'
                        name = 'Ivan Vakhrushev'
                        email = 'mfvanek@gmail.com'
                    }
                }

                scm {
                    connection = 'scm:git:https://github.com/mfvanek/pg-index-health.git'
                    developerConnection = 'scm:git@github.com:mfvanek/pg-index-health.git'
                    url = 'https://github.com/mfvanek/pg-index-health'
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

signing {
    if (!version.endsWith('SNAPSHOT')) {
        useGpgCmd()
        sign publishing.publications.mavenJava
    }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

spotbugsMain {
    reports {
        html.enabled = true
    }
}
spotbugsTest {
    reports {
        html.enabled = true
    }
}
spotbugs {
    showProgress = true
    effort = 'max'
    reportLevel = 'low'
    excludeFilter = file("config/spotbugs/exclude.xml")
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

jacocoTestCoverageVerification {
    dependsOn test
    violationRules {
        rule {
            limit {
                counter = 'CLASS'
                value = 'MISSEDCOUNT'
                maximum = 0
            }
        }
        rule {
            limit {
                counter = 'METHOD'
                value = 'MISSEDCOUNT'
                maximum = 0
            }
        }
        rule {
            limit {
                counter = 'LINE'
                value = 'MISSEDCOUNT'
                maximum = 0
            }
        }
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
        }
        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
        }
    }
}

checkstyle {
    toolVersion '10.3.1'
    configFile file("config/checkstyle/checkstyle.xml")
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}
checkstyleMain {
    source ='src/main/java'
}
checkstyleTest {
    source ='src/test/java'
}

check.dependsOn jacocoTestReport, jacocoTestCoverageVerification

sonarqube {
    properties {
        property "sonar.projectKey", "mfvanek_pg-index-health"
        property "sonar.organization", "mfvanek"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

pmd {
    consoleOutput = true
    toolVersion = "6.47.0"
    ruleSetFiles = files("config/pmd/pmd.xml")
    ruleSets = []
}
