plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id 'com.github.spotbugs' version '4.7.1'
    id 'checkstyle'
}

group 'io.github.mfvanek'
version '0.3.2-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenLocal()
    mavenCentral()
}

def junitVersion = '5.7.2'
def testContainersVersion = '1.15.3'
dependencies {
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'commons-io:commons-io:2.8.0'
    implementation 'org.apache.commons:commons-dbcp2:2.8.0'
    implementation 'org.slf4j:slf4j-api:1.7.32'

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'ch.qos.logback:logback-classic:1.2.5'
    testImplementation 'org.mockito:mockito-core:3.10.0'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.6.1'

    testImplementation 'org.postgresql:postgresql:42.2.20'
    testImplementation "org.testcontainers:testcontainers:$testContainersVersion"
    testImplementation "org.testcontainers:junit-jupiter:$testContainersVersion"
    testImplementation "org.testcontainers:postgresql:$testContainersVersion"
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}

jar {
    manifest {
        attributes("Implementation-Title": project.name,
                "Implementation-Version": project.version)
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name = project.name
                description = 'pg-index-health is a Java library for analyzing and maintaining indexes health in PostgreSQL databases.'
                url = 'https://github.com/mfvanek/pg-index-health'
                licenses {
                    license {
                        name = 'Apache License Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0'
                    }
                }

                developers {
                    developer {
                        id = 'mfvanek'
                        name = 'Ivan Vakhrushev'
                        email = 'mfvanek@gmail.com'
                    }
                }

                scm {
                    connection = 'scm:git:https://github.com/mfvanek/pg-index-health.git'
                    developerConnection = 'scm:git@github.com:mfvanek/pg-index-health.git'
                    url = 'https://github.com/mfvanek/pg-index-health'
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

signing {
    if (!version.endsWith('SNAPSHOT')) {
        sign publishing.publications.mavenJava
    }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

spotbugsMain {
    reports {
        html.enabled = true
    }
}

spotbugsTest {
    reports {
        html.enabled = true
    }
}

spotbugs {
    showProgress = true
    excludeFilter = file("config/spotbugs/exclude.xml")
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

jacocoTestCoverageVerification {
    dependsOn test
    violationRules {
        rule {
            limit {
                counter = 'CLASS'
                value = 'MISSEDCOUNT'
                maximum = 0
            }
        }
        rule {
            limit {
                counter = 'METHOD'
                value = 'MISSEDCOUNT'
                maximum = 0
            }
        }
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
        }
    }
}

checkstyle {
    toolVersion '8.45'
    configFile file("config/checkstyle/checkstyle.xml")
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}
checkstyleMain {
    source ='src/main/java'
}
checkstyleTest {
    source ='src/test/java'
}

check.dependsOn jacocoTestReport
check.dependsOn jacocoTestCoverageVerification
