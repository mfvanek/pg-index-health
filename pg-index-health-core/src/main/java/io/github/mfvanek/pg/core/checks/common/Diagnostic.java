/*
 * Copyright (c) 2019-2025. Ivan Vakhrushev and others.
 * https://github.com/mfvanek/pg-index-health
 *
 * This file is a part of "pg-index-health" - an embeddable schema linter for PostgreSQL
 * that detects common anti-patterns and promotes best practices.
 *
 * Licensed under the Apache License 2.0
 */

package io.github.mfvanek.pg.core.checks.common;

import io.github.mfvanek.pg.core.utils.QueryExecutors;

import java.util.Objects;
import java.util.function.Function;

/**
 * A list of standard diagnostics with corresponding SQL queries and query executors.
 *
 * @author Ivan Vakhrushev
 * @see QueryExecutor
 * @see QueryExecutors
 */
public enum Diagnostic implements CheckInfo {

    BLOATED_INDEXES(StandardCheckInfo::ofBloat),
    BLOATED_TABLES(StandardCheckInfo::ofBloat),
    DUPLICATED_INDEXES,
    FOREIGN_KEYS_WITHOUT_INDEX,
    INDEXES_WITH_NULL_VALUES,
    INTERSECTED_INDEXES,
    INVALID_INDEXES,
    TABLES_WITH_MISSING_INDEXES(StandardCheckInfo::ofCluster),
    TABLES_WITHOUT_PRIMARY_KEY,
    UNUSED_INDEXES(StandardCheckInfo::ofCluster),
    TABLES_WITHOUT_DESCRIPTION,
    COLUMNS_WITHOUT_DESCRIPTION,
    COLUMNS_WITH_JSON_TYPE,
    COLUMNS_WITH_SERIAL_TYPES,
    FUNCTIONS_WITHOUT_DESCRIPTION,
    INDEXES_WITH_BOOLEAN,
    NOT_VALID_CONSTRAINTS,
    BTREE_INDEXES_ON_ARRAY_COLUMNS,
    SEQUENCE_OVERFLOW(StandardCheckInfo::ofRemainingPercentage),
    PRIMARY_KEYS_WITH_SERIAL_TYPES,
    DUPLICATED_FOREIGN_KEYS,
    INTERSECTED_FOREIGN_KEYS,
    POSSIBLE_OBJECT_NAME_OVERFLOW,
    TABLES_NOT_LINKED_TO_OTHERS,
    FOREIGN_KEYS_WITH_UNMATCHED_COLUMN_TYPE,
    TABLES_WITH_ZERO_OR_ONE_COLUMN,
    OBJECTS_NOT_FOLLOWING_NAMING_CONVENTION,
    COLUMNS_NOT_FOLLOWING_NAMING_CONVENTION,
    PRIMARY_KEYS_WITH_VARCHAR,
    COLUMNS_WITH_FIXED_LENGTH_VARCHAR,
    INDEXES_WITH_UNNECESSARY_WHERE_CLAUSE,
    PRIMARY_KEYS_THAT_MOST_LIKELY_NATURAL_KEYS,
    COLUMNS_WITH_MONEY_TYPE,
    INDEXES_WITH_TIMESTAMP_IN_THE_MIDDLE,
    COLUMNS_WITH_TIMESTAMP_OR_TIMETZ_TYPE,
    TABLES_WHERE_PRIMARY_KEY_COLUMNS_NOT_FIRST,
    TABLES_WHERE_ALL_COLUMNS_NULLABLE_EXCEPT_PK;

    private final CheckInfo inner;

    /**
     * Constructs a new instance of the Diagnostic class.
     * This constructor initializes the inner field with a static CheckInfo instance based on the name of the current object.
     */
    Diagnostic() {
        this.inner = StandardCheckInfo.ofStatic(name());
    }

    /**
     * Constructs a new instance of the Diagnostic class with a factory for creating {@code CheckInfo}.
     * The constructor initializes the inner field using a {@code CheckInfo} instance
     * generated by applying the provided factory to the name of the current object.
     *
     * @param checkInfoFactory a factory function that accepts a {@code String} (the name of the current object)
     *                         and produces a {@code CheckInfo} instance; must not be null
     */
    Diagnostic(final Function<String, CheckInfo> checkInfoFactory) {
        this.inner = Objects.requireNonNull(checkInfoFactory).apply(name());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String getName() {
        return inner.getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExecutionTopology getExecutionTopology() {
        return inner.getExecutionTopology();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String getSqlQuery() {
        return inner.getSqlQuery();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QueryExecutor getQueryExecutor() {
        return inner.getQueryExecutor();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean isRuntime() {
        return inner.isRuntime();
    }
}
